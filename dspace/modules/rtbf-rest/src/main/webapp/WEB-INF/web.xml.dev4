<?xml version="1.0" encoding="UTF-8"?>
<!-- This web.xml file is not required when using Servlet 3.0 container,
     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <!--init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>org.dspace.rtbf.rest</param-value>
        </init-param-->
        <init-param>
          <param-name>javax.ws.rs.Application</param-name>
          <param-value>org.dspace.rtbf.rest.application.RsApplication</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>


    <!-- DSpace Configuration Information -->
    <context-param>
        <param-name>dspace-config</param-name>
        <param-value>/SAS/appl/dspace/dspace-5.0/config/dspace.cfg</param-value>
    </context-param>

    <!-- new ConfigurationService initialization for dspace.dir -->
    <context-param>
       <description>
         The location of the main DSpace configuration file
       </description>
       <param-name>dspace.dir</param-name>
       <param-value>/SAS/appl/dspace/dspace-5.0</param-value>
    </context-param>
  
    <!--  configures the locations that Spring configurations are searched for.
    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring/*.xml</param-value>
    </context-param>
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/applicationContext.xml
        </param-value>
        <!--
            Add this context if using Spring Security
            /WEB-INF/applicationContext-security.xml
        -->
    </context-param>

    <listener>
        <listener-class>org.dspace.app.util.DSpaceContextListener</listener-class>
    </listener>

    <!-- kernel start listener (from impl)
       The following listener can be used instead of the filter below, it is simpler, cleaner
       and eliminates the need for a DSpaceKernelServletFilter filter to be involved with the
       request cycle.
    -->
    <listener>
        <listener-class>org.dspace.servicemanager.servlet.DSpaceKernelServletContextListener</listener-class>
    </listener>

    <listener>
      <listener-class>
         org.springframework.web.context.ContextLoaderListener
      </listener-class>
    </listener>

    <!-- 09.11.2015 Lan: to support name mapping of metadata -->
    <listener>
        <listener-class>org.dspace.rtbf.rest.util.RsContextListener</listener-class>
    </listener>

    <!-- Lan 17.03.2015
        Set server response Access-Control-Allow-Origin for Testing purpose
        Add jetty-servlets.jar to webapps/<app>/WEB-INF/lib
    -->
    <filter>
        <filter-name>cross-origin</filter-name>
        <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
        <init-param>
            <param-name>allowedOrigins</param-name>
            <param-value>*</param-value>
        </init-param>
        <init-param>
            <param-name>allowedMethods</param-name>
            <param-value>GET,POST,HEAD</param-value>
        </init-param>
        <init-param>
            <param-name>allowedHeaders</param-name>
            <param-value>X-Requested-With,Content-Type,Accept,Origin</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>cross-origin</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>   

</web-app>
